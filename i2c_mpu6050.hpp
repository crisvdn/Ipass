
///@file

#ifndef I2C_MPU6050_HPP
#define I2C_MPU6050_HPP

/// \mainpage
/// This is the documentation of the MPU-6050 Library.
/// \section MPU-6050
/// The MPU-6050 is a gyroscope and a accelerometer which measures in X, Y and Z axis.
/// The MPU-6050 also contains a temperature sensor which it uses to receive stable readings.
/// \image html rp-mpu-6050.png
/// references:
/// - <a href="https://www.invensense.com/wp-content/uploads/2015/02/MPU-6000-Datasheet1.pdf">
///    MPU-6050 Datasheet</a> (pdf)
/// - <a href="https://www.invensense.com/wp-content/uploads/2015/02/MPU-6000-Register-Map1.pdf">
///    MPU-6050 Register Map</A> (pdf)
/// \section Boost Author
///
///		Author: Cris van der Nolle
///		Name: i2c_mpu6050
///		Date: 27-6-2018
/// \Section Boost License
///
///		Boost Software License - Version 1.0 - August 17th, 2003
///		Permission is hereby granted, free of charge, to any person or organization
///		obtaining a copy of the software and accompanying documentation covered by
///		this license (the "Software") to use, reproduce, display, distribute,
///		execute, and transmit the Software, and to prepare derivative works of the
///		Software, and to permit third-parties to whom the Software is furnished to
///		do so, all subject to the following:
///		The copyright notices in the Software and this entire statement, including
///		the above license grant, this restriction and the following disclaimer,
///		must be included in all copies of the Software, in whole or in part, and
///		all derivative works of the Software, unless such copies or derivative
///		works are solely in the form of machine-executable object code generated by
///		a source language processor.
///		THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
///		IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
///		FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
///		SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
///		FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
///		ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
///		DEALINGS IN THE SOFTWARE.


#include "hwlib.hpp"

/// \brief
/// Enum commands to define register addresses and register most-used values.
/// \details
/// These enum commands either point to a hexadecimal register address for the MPU-6050 
///	or hexadecimal values most used to write towards a register.
/// If you want to read or write to a register, it is highly recommended to use the enum commands to avoid making mistakes.
/// Accelerometer and gyroscope registers consist of 2 bytes. The _H is the MSB and the _L is the LSB.
///
/// references:
/// - <a href="https://www.invensense.com/wp-content/uploads/2015/02/MPU-6000-Datasheet1.pdf">
///    MPU-6050 Datasheet</a> (pdf)
/// - <a href="https://www.invensense.com/wp-content/uploads/2015/02/MPU-6000-Register-Map1.pdf">
///    MPU-6050 Register Map</A> (pdf)

enum commands : uint8_t {
	GYRO_CONFIG = 0x1B, 	 
	ACCEL_CONFIG = 0x1C,	
	PWR_MGMT_1 = 0x6B, 	
	FIFO_EN = 0x23,
	CONFIG = 0x1A,
	WHO_AM_I = 0x75,
	ACCEL_XOUT_H = 0x3B, //bit 15-8
	ACCEL_XOUT_L = 0x3C, //bit 7-0 
	ACCEL_YOUT_H = 0x3D,
	ACCEL_YOUT_L = 0x3E,		
	ACCEL_ZOUT_H = 0x3F,
	ACCEL_ZOUT_L = 0x40,
	TEMP_OUT_H   = 0x41,
	TEMP_OUT_L   = 0x42,
	GYRO_XOUT_H  = 0x43,
	GYRO_XOUT_L  = 0x44,
	GYRO_YOUT_H  = 0x45,
	GYRO_YOUT_L  = 0x46,
	GYRO_ZOUT_H  = 0x47,
	GYRO_ZOUT_L  = 0x48,
	AFS_SEL_0 = 0x00,
	AFS_SEL_1 = 0x08,
	AFS_SEL_2 = 0x10,
	AFS_SEL_3 = 0x18,
	FS_SEL_0 = 0x00,
	FS_SEL_1 = 0x08,
	FS_SEL_2 = 0x10,
	FS_SEL_3 = 0x18,
	DLPF_CONFIG_0 = 0x00,
	DLPF_CONFIG_1 = 0x01,
	DLPF_CONFIG_2 = 0x02,
	DLPF_CONFIG_3 = 0x03,
	DLPF_CONFIG_4 = 0x04,
	DLPF_CONFIG_5 = 0x05,
	DLPF_CONFIG_6 = 0x06,
	SLEEP_DISABLED = 0x00
};


/// \brief
/// i2c_mpu6050 class creates an object out of an bus and a hexademical chip address from the MPU-6050.
/// \details
/// The class creates an object that has a bit_banged scl & sda bus. These are from hwlib.hpp.
/// Any I2C communication is done through functions of hwlib.hpp.
/// 
class i2c_mpu6050{
private:
	hwlib::i2c_bus_bit_banged_scl_sda & bus;
///\brief
/// The chip address.
///\details
///	This is the chipaddress, it is 0x68 when AD0 is pulled low. When AD0 is high, the address is 0x69.
	uint8_t chipAddr;
///\brief
/// Offsets when calibrating the device.
///\details
///	These offsets are private variables. They will be changed by the calibrate function.	
	int32_t acXoffset = 0x00, acYoffset = 0x00, acZoffset = 0x00;
	int32_t GyXoffset = 0x00, GyYoffset = 0x00, GyZoffset = 0x00;
///\brief
/// This is the scaling for the Accelerometer and the Gyrometer.
///\details
///	These doubles will be changed when setting the sensitivity of the Gyrometer and Accelerometer.
/// These doubles are needed to convert raw values to either degrees per second(gyroscope) or lineair gravitational acceleration(G-force).
	double accScale = 0x00;
	double gyroScale = 0x00;
///\brief
/// Pi defined.
///\details
///	Pi defined for calculating pitch and roll.	
	const double pi = 3.141592;

///\brief
/// Initialize sets four registers to recommended settings.
///\details
/// The sleep bit will be cleared to activate the MPU-6050. Accelerometer, Gyrometer and general config registers
/// will be set to preferred settings.
/// The general config register only sets the Digital Low Pass Filter to mode 4(refer to datasheet for further
/// information)
	void initialize();
///\brief
/// Simple function to print a header format.
///\details
/// This header format makes it easier to read the raw or filtered values collected from the gyrometer and/or accelerometer.
	void header_values();
///\brief
/// This function checks if it can communicate with a MPU-6050 device with corresponding chip address.
///\details
/// This function checks if there can be a connection established with a MPU-6050 device with the address 0x68 or 0x69.
	void check_identity();

public:
///\brief
///	The constructor creates an object ouf of an scl & sda line. The chipaddres is given with it.
///\details
/// The chipaddress is 0x68 with AD0 pulled to low. If AD0 is pulled to high, the address is 0x69.
/// The constructor will also call various functions to set it up for easier usage.
	i2c_mpu6050(hwlib::i2c_bus_bit_banged_scl_sda & bus, uint8_t chipAddr):
	bus ( bus ),
	chipAddr ( chipAddr )
	{
	initialize();
	check_identity();
	calibrate();
	accScale = get_accel_scale();
	gyroScale = get_gyro_scale();
	}
///\brief
/// A test function to read various registers and output if tests encountered issues or not.
///\details
///	The test function calls the check_identity() function. It also checks if the sleep bit is cleared and
/// if the accelerometer and gyroscope registers are set and have the corresponding accelerometer/gyroscope scale set.
/// it will also return if these registers are NOT set properly. If that is the case, make sure you are communicating with the device
/// properly or setting correct values in the register.
	void test();
///\brief
/// This function reads the gyrometer register and sets the correct scaling integer.
///\details
/// This function reads the gyrometer register and sets the correct scaling integer.
/// This scaling is necessary to convert raw values to filtered values(degrees per second).
	int get_gyro_scale();
///\brief
/// This function reads the accelerometer register and sets the correct scaling integer.
///\details
/// This function reads the accelerometer register and sets the correct scaling integer.
/// This scaling is necessary to convert raw values to filtered values(G-force).
	int get_accel_scale();
///\brief
/// This function is to set the accelerometer and gyrometer scaling to your own preferred setting.
///\details
/// The function can be used to set own preferred settings. The function is constructed to accept 0, 1, 2 or 3
/// respectively corresponding towards the MPU-6050 Datasheet. It will shift the unsigned integer towards the correct position in
/// the register.
///@param FS_SEL is to set the Full Scale Range of the gyrometer.
///@param AFS_SEL is to set the Accelerometer Full Scale Range.
	void set_accel_gyro_scale(uint8_t FS_SEL, uint8_t AFS_SEL);
///\brief
/// This function sets a specific register.
///\details
///	This function sets a specific register with the data provided.
/// Use enums for easy usage.
/// the function will make sure the i2c communication is done properly.
	void set_register(const uint8_t &regAddr, const uint8_t & data);
///\brief
/// This function will read 2 bytes from a register address.
///\details
/// This function will read 2 bytes from a register address and the register address + 1.
/// This data will be returned inside one int16_t. 
///@param regAddr This is the register address. The follow up register address will be read afterwards.
	int16_t read_bytes(const uint8_t &regAddr);
///\brief
/// This function will read 1 byte from a register address
///\details
/// This function will read 1 btyte from a register address and returns this as an signed int8_t.
	int8_t read_word(const uint8_t &regAddr);
	
///\brief
/// A function to output raw values of the accelerometer, temperature sensor and gyroscope to the screen.
///\details
/// This function outputs raw values of the accelerometer(X, Y and Z axis), temperature reading(in °C) and gyroscope(X, Y, and Z axis).
	void display_raw_values();
///\brief
/// A function to output filtered values of the accelerometer, temperature sensor and gyroscope to the screen.
///\details
/// This function outputs raw values of the accelerometer(X, Y and Z axis), temperature reading(in °C) and gyroscope(X, Y, and Z axis).
/// These values have been filtered with the offset and scaling.
/// The gyroscope readings are in degrees per second.
/// The accelerometer readings are in G-force.
	void display_values();
///\brief
/// This function outputs the roll and pitch to the screen.
///\details
/// This function outputs roll and pitch towards the screen in degrees.
/// A negative value will be towards rolling towards the right or tilting with the front of the sensor downwards.
	void display_roll_pitch(); //rp is short for roll & pitch.

///\brief
/// This function outputs the calibrate values to the screen.
///\details
/// This function is a get function for the calibrate values of the gyroscope X, Y and Z axis, and the accelerometer X, Y and Z axis.
	void display_calibrate_values();
///\brief
/// This function returns the roll as an integer.
///\details
/// This function returns the roll value of the MPU-6050 as an integer.
	int read_roll();
///\brief
/// This function returns the pitch as an integer.
///\details
/// This function returns the pitch value of the MPU-6050 as an integer.
	int read_pitch();
///\brief
/// This function returns the raw value of accelerometer X axis.
///\details
/// This function returns the raw value of accelerometer X axis. No offset or scaling has been done on this value.
	int read_accelX();
///\brief
/// This function returns the raw value of accelerometer Y axis. 
///\details
/// This function returns the raw value of accelerometer Y axis. No offset or scaling has been done on this value.
	int read_accelY();
///\brief
/// This function returns the raw value of accelerometer Z axis.
///\details
/// This function returns the raw value of accelerometer Z axis. No offset or scaling has been done on this value.
	int read_accelZ();
///\brief
/// This function returns the filtered accelerometer values.
///\details
/// This function returns the filtered accelerometer values in the parameters.
///@param gAccelX This will receive the filtered value of the accelerometer X axis.
///@param gAccelY This will receive the filtered value of the accelerometer Y axis.
///@param gAccelZ This will receive the filtered value of the accelerometer Z axis.
	void read_values(int& gAccelX, int &gAccelY, int &gAccelZ);
///\brief
/// A function to set calibrate values manually.
///\details
/// This function is to set calibrate values manually. 
///@param accelXoffset The offset for Accelerometer X axis.
///@param accelYoffset The offset for Accelerometer Y axis.
///@param accelZoffset The offset for Accelerometer Z axis.
///@param GyroXoffset The offset for Gyroscope X axis.
///@param GyroYoffset The offset for Gyroscope Y axis.
///@param GyroZoffset The offset for Gyroscope Z axis.
	void set_calibrate_values(const int16_t & accelXoffset, const int16_t & accelYoffset,const int16_t & accelZoffset,
	const int16_t & GyroXoffset, const int16_t & GyroYoffset, const int16_t & GyroZoffset);
///\brief
/// This function calibrates the MPU-6050.
///\details
/// This function calibrates the MPU-6050. It does a quick reading 100 times to stabilize the temperature sensor for 
/// stable readings in the second 10 readings.
/// Make sure to not move the MPU-6050 for proper calibration.
	void calibrate();
///\brief
///
///\details
///
};


#endif		//I2C_MPU6050_HPP